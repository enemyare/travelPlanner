name: Docker CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/nest-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/react-frontend

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: nestdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Backend
    - name: Build and test backend
      working-directory: ./backend
      run: |
        npm ci
        npm run test
        docker build -t $BACKEND_IMAGE:$GITHUB_SHA .

    # Frontend
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
        docker build -t $FRONTEND_IMAGE:$GITHUB_SHA .

    - name: Push Docker images
      if: github.ref == 'refs/heads/main'
      run: |
        docker push $BACKEND_IMAGE:$GITHUB_SHA
        docker push $FRONTEND_IMAGE:$GITHUB_SHA
        docker tag $BACKEND_IMAGE:$GITHUB_SHA $BACKEND_IMAGE:latest
        docker tag $FRONTEND_IMAGE:$GITHUB_SHA $FRONTEND_IMAGE:latest
        docker push $BACKEND_IMAGE:latest
        docker push $FRONTEND_IMAGE:latest

  deploy:
    needs: build-test-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /path/to/your/project
          docker-compose down
          docker pull ${{ env.BACKEND_IMAGE }}:latest
          docker pull ${{ env.FRONTEND_IMAGE }}:latest
          docker-compose up -d
